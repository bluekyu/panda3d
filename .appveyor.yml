#---------------------------------#
#      general configuration      #
#---------------------------------#

# version format
version: '{branch}-{build}'

#---------------------------------#
#    environment configuration    #
#---------------------------------#

# Build worker image (VM template)
image:
- Ubuntu1804
- Visual Studio 2017


# set clone depth
clone_depth: 1


# scripts that are called at very beginning, before repo cloning
init:
- ps: >-
    if (($isLinux) -and ($env:CONFIGURATION -eq "Debug") -and (Test-Path env:TRIGGER_NAME)) {
        Update-AppveyorBuild -Message "Build by $env:TRIGGER_BUILD_VERSION in $env:TRIGGER_NAME"
    }
- git --version
- python --version
- cmake --version


# environment variables
#environment:


# this is how to allow failing jobs in the matrix
matrix:
    fast_finish: true   # set this flag to immediately finish build once one of the jobs fails.


# scripts that run after cloning repository
install:
- sh: sudo apt-get update
- sh: sudo apt-get install --yes --no-install-recommends clang
- sh: sudo apt-get install --yes --no-install-recommends libjpeg-dev libtiff-dev libgl1-mesa-dev libvorbis-dev libopenal-dev libharfbuzz-dev libopenexr-dev libassimp-dev

- ps: mkdir $env:INSTALL_PREFIX
- ps: pushd $env:INSTALL_PREFIX
- ps: >-
    if ($isWindows) {
        if ($env:CONFIGURATION -eq "Debug") {
            Start-FileDownload 'https://ci.appveyor.com/api/projects/bluekyu/panda3d-thirdparty/artifacts/panda3d-thirdparty.7z?branch=master&job=Configuration%3A+MixForDebug'
        } else {
            Start-FileDownload 'https://ci.appveyor.com/api/projects/bluekyu/panda3d-thirdparty/artifacts/panda3d-thirdparty.7z?branch=master&job=Configuration%3A+Release'
        }
    }
- cmd: 7z x -y panda3d-thirdparty.7z > nul
- ps: popd


#---------------------------------#
#       build configuration       #
#---------------------------------#

# build platform, i.e. x86, x64, Any CPU. This setting is optional.
platform: x64


# build Configuration, i.e. Debug, Release, etc.
configuration:
- Debug
- Release


build:
    parallel: true                  # enable MSBuild parallel builds


# to run your custom scripts instead of automatic MSBuild
build_script:
- ps: mkdir _build
- ps: pushd _build

# Linux
- sh: >-
    if [ "$CONFIGURATION" = "Debug" ]; then
        cmake -G "$CMAKE_GENERATOR" -Wno-dev .. -DCMAKE_INSTALL_PREFIX="$INSTALL_PREFIX/panda3d" -Dpanda3d_build_eigen=OFF -Dpanda3d_build_optimize=1
    else
        cmake -G "$CMAKE_GENERATOR" -Wno-dev .. -DCMAKE_INSTALL_PREFIX="$INSTALL_PREFIX/panda3d" -Dpanda3d_build_eigen=OFF
    fi
- sh: cmake --build . --config $CONFIGURATION

# Visual Studio
- cmd: >-
    if "%CONFIGURATION%"=="Debug" (
    cmake .. -G "%CMAKE_GENERATOR%" -Wno-dev -DCMAKE_INSTALL_PREFIX="%INSTALL_PREFIX%/panda3d" -Dpanda3d_build_eigen=OFF -Dpanda3d_build_optimize=1
    ) else (
    cmake .. -G "%CMAKE_GENERATOR%" -Wno-dev -DCMAKE_INSTALL_PREFIX="%INSTALL_PREFIX%/panda3d" -Dpanda3d_build_eigen=OFF
    )

    cmake --build . --config %CONFIGURATION%

- ps: popd

#---------------------------------#
#       tests configuration       #
#---------------------------------#

test_script:
- ps: pushd _build
- ps: ctest -C $env:CONFIGURATION --output-on-failure
- ps: popd

after_test:
# Linux
- sh: cmake --build _build --config $CONFIGURATION --target install
- sh: pushd "$INSTALL_PREFIX"
- sh: tar cJf "$APPVEYOR_BUILD_FOLDER/panda3d.tar.xz" "panda3d"
- sh: popd

# Visual Studio
- cmd: cmake --build _build --config %CONFIGURATION% --target install
- cmd: 7z a panda3d.7z "%INSTALL_PREFIX%/panda3d"

#---------------------------------#
#     deployment configuration    #
#---------------------------------#

deploy: off

#---------------------------------#
#        global handlers          #
#---------------------------------#

# on successful build
on_success:
- ps: >-
    if (($env:APPVEYOR_BUILD_WORKER_IMAGE -eq "Visual Studio 2017") -and ($env:CONFIGURATION -eq "Release") -and ($env:APPVEYOR_REPO_BRANCH -eq "master")) {
        Start-AppveyorBuild -ApiKey $env:api_key -ProjectSlug 'render-pipeline-cpp' -EnvironmentVariables @{
            TRIGGER_NAME = $env:APPVEYOR_PROJECT_NAME
            TRIGGER_BUILD_VERSION = $env:APPVEYOR_BUILD_VERSION
        }
    }

#---------------------------------#
#       specializing matrix       #
#---------------------------------#

for:
-
    matrix:
        only:
            - image: Ubuntu1804
    stack: python 3
    environment:
        CC: /usr/bin/clang
        CXX: /usr/bin/clang++
        CMAKE_GENERATOR: Unix Makefiles
        INSTALL_PREFIX: /home/appveyor/projects/_install

    artifacts:
        - path: panda3d.tar.xz

-
    matrix:
        only:
            - image: Visual Studio 2017

    environment:
        CMAKE_GENERATOR: Visual Studio 15 2017 Win64
        INSTALL_PREFIX: C:/projects/_install
        PATH: C:\Python36-x64;%PATH%
        MAKEPANDA_THIRDPARTY: C:/projects/_install/panda3d-thirdparty

    artifacts:
        - path: panda3d.7z
